name: MLOps CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.10"
  DOCKER_IMAGE: mlops-quickstart-api

jobs:
  # 1. ÏΩîÎìú ÌíàÏßà Î∞è Î≥¥Ïïà Í≤ÄÏÇ¨
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install flake8 black isort bandit safety
      
      - name: Code formatting check
        run: |
          black --check --diff src/ app/ tests/
          isort --check-only --diff src/ app/ tests/
      
      - name: Lint with flake8
        run: |
          flake8 src/ app/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ app/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
      
      - name: Security check with bandit
        run: |
          bandit -r src/ app/ -f json -o bandit-report.json || true
          bandit -r src/ app/ -f txt -o bandit-report.txt || true
      
      - name: Security vulnerabilities check
        run: |
          safety check --json --output safety-report.json || true
          safety check --text --output safety-report.txt || true

  # 2. ÌÖåÏä§Ìä∏ Ïã§Ìñâ
  test:
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
      
      - name: Run unit tests
        run: |
          python -m pytest tests/ -v --cov=src --cov=app --cov-report=xml --cov-report=html
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # 3. Î™®Îç∏ ÌõàÎ†® Î∞è MLflow ÌÖåÏä§Ìä∏
  mlflow-test:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
      
      - name: Run model training
        run: |
          python src/train.py
      
      - name: Check generated artifacts
        run: |
          ls -la artifacts/
          test -f artifacts/model.pkl
          test -f artifacts/classification_report.csv
      
      - name: Generate data quality report
        run: |
          python src/report.py
          test -f reports/data_quality_report.html

  # 4. Docker ÎπåÎìú Î∞è ÌÖåÏä§Ìä∏
  docker-build:
    runs-on: ubuntu-latest
    needs: mlflow-test
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }}:${{ github.sha }} .
          docker build -t ${{ env.DOCKER_IMAGE }}:latest .
      
      - name: Test Docker image
        run: |
          docker run --rm ${{ env.DOCKER_IMAGE }}:latest python -c "import app.main; print('‚úÖ FastAPI app imports successfully')"
      
      - name: Docker image size
        run: |
          docker images ${{ env.DOCKER_IMAGE }}:latest --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"

  # 5. ÌÜµÌï© ÌÖåÏä§Ìä∏
  integration-test:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-buildx-action@v3
      
      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt
      
      - name: Start FastAPI server
        run: |
          timeout 30s uvicorn app.main:app --host 127.0.0.1 --port 8000 &
          sleep 5
      
      - name: Test API endpoints
        run: |
          curl -f http://127.0.0.1:8000/health
          curl -f -X POST http://127.0.0.1:8000/predict \
            -H "Content-Type: application/json" \
            -d '{"sepal_length":5.1,"sepal_width":3.5,"petal_length":1.4,"petal_width":0.2}'

  # 6. Í≤∞Í≥º ÏöîÏïΩ
  summary:
    runs-on: ubuntu-latest
    needs: [code-quality, test, mlflow-test, docker-build, integration-test]
    if: always()
    steps:
      - name: CI/CD Pipeline Summary
        run: |
          echo "üöÄ MLOps CI/CD Pipeline Summary"
          echo "================================"
          echo "‚úÖ Code Quality: ${{ needs.code-quality.result }}"
          echo "‚úÖ Unit Tests: ${{ needs.test.result }}"
          echo "‚úÖ MLflow Test: ${{ needs.mlflow-test.result }}"
          echo "‚úÖ Docker Build: ${{ needs.docker-build.result }}"
          echo "‚úÖ Integration Test: ${{ needs.integration-test.result }}"
          echo ""
          echo "üéØ All jobs completed successfully!"
